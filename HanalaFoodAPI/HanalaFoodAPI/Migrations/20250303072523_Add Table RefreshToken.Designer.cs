// <auto-generated />
using System;
using HanalaFoodAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HanalaFoodAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250303072523_Add Table RefreshToken")]
    partial class AddTableRefreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HanalaFoodAPI.Models.Account", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Admin", b =>
                {
                    b.Property<string>("AdminID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CanManageSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewReport")
                        .HasColumnType("bit");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Customer", b =>
                {
                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Enterprise", b =>
                {
                    b.Property<string>("EnterpriseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desscription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnterpriseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnterpriseID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Enterprises");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Food", b =>
                {
                    b.Property<string>("FoodID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("FoodID");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.MENU_FOOD", b =>
                {
                    b.Property<string>("MenuID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("FoodID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.HasKey("MenuID", "FoodID");

                    b.HasIndex("FoodID");

                    b.ToTable("MenuFoods");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Menu", b =>
                {
                    b.Property<string>("MenuID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnterpriseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MenuID");

                    b.HasIndex("EnterpriseID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("AccountID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.OrderDetails", b =>
                {
                    b.Property<string>("OrderDetailsID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.HasKey("OrderDetailsID");

                    b.HasIndex("FoodID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.RefreshToken", b =>
                {
                    b.Property<string>("TokenID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TokenID");

                    b.HasIndex("AccountID");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Support", b =>
                {
                    b.Property<string>("MessageID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageID");

                    b.HasIndex("AccountID");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Voucher", b =>
                {
                    b.Property<string>("VoucherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminID1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<string>("EnterpriseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VoucherID");

                    b.HasIndex("AdminID");

                    b.HasIndex("AdminID1");

                    b.HasIndex("EnterpriseID");

                    b.HasIndex("OrderID");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Admin", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Account", "Account")
                        .WithOne("Admin")
                        .HasForeignKey("HanalaFoodAPI.Models.Admin", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Customer", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("HanalaFoodAPI.Models.Customer", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Enterprise", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Account", "Account")
                        .WithOne("Enterprise")
                        .HasForeignKey("HanalaFoodAPI.Models.Enterprise", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.MENU_FOOD", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Food", "Food")
                        .WithMany("MenuFoods")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HanalaFoodAPI.Models.Menu", "Menu")
                        .WithMany("MenuFoods")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Menu", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Enterprise", "Enterprise")
                        .WithMany("Menus")
                        .HasForeignKey("EnterpriseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Order", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Account", "Account")
                        .WithMany("Order")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.OrderDetails", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Food", "Food")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HanalaFoodAPI.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Payment", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("HanalaFoodAPI.Models.Payment", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.RefreshToken", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Support", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Account", "Account")
                        .WithMany("Supports")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Voucher", b =>
                {
                    b.HasOne("HanalaFoodAPI.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HanalaFoodAPI.Models.Admin", null)
                        .WithMany("Vouchers")
                        .HasForeignKey("AdminID1");

                    b.HasOne("HanalaFoodAPI.Models.Enterprise", "Enterprise")
                        .WithMany("Vouchers")
                        .HasForeignKey("EnterpriseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HanalaFoodAPI.Models.Order", null)
                        .WithMany("Vouchers")
                        .HasForeignKey("OrderID");

                    b.Navigation("Admin");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Account", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Enterprise")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Supports");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Admin", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Enterprise", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Food", b =>
                {
                    b.Navigation("MenuFoods");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Menu", b =>
                {
                    b.Navigation("MenuFoods");
                });

            modelBuilder.Entity("HanalaFoodAPI.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
